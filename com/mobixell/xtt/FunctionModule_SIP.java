package com.mobixell.xtt;

import java.util.LinkedHashMap;
import java.util.Vector;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;


/**
 * FunctionModule_HTTP provides SIP and SIPS GET functions.
 *
 * @author      Roger Soder
 * @version     $Id: FunctionModule_SIP.java,v 1.15 2009/06/05 12:38:19 rsoder Exp $
 */
public class FunctionModule_SIP extends FunctionModule
{
    private Map<String,SIPConnection> connections = Collections.synchronizedMap(new HashMap<String,SIPConnection>());
    private SIPServer s             = null;
    private Thread ws               = null;
    private final static String CRLF= "\r\n";

    private SIPConnection defaultConnection = null;

    private static javax.net.ssl.HostnameVerifier defaultHostnameVerifier=null;
    private static javax.net.ssl.SSLSocketFactory defaultSSLSocketFactory=null;



    /**
     * clears and reinitializes all the variables. Does reset the SIP.
     */
    public void initialize()
    {
        defaultConnection=new SIPConnection("DEFAULT","SIP");
        defaultConnection.readConfiguration();

        SIPWorker.setServerSendHeader(new LinkedHashMap<String,Vector<String>>());
        SIPWorker.init();
        SIPServer.resetWorkerId();
        String skipResponse=XTTProperties.getProperty("SIPSERVER/DISABLERESPONSE");
        if(!skipResponse.equals("null"))
        {
            SIPWorker.setSkipResponse(true);
        }
        String disableAutoNotify=XTTProperties.getProperty("SIPSERVER/DISABLEAUTONOTIFY");
        if(!disableAutoNotify.equals("null"))
        {
            SIPWorker.setSkipAutoNotify(true);
        }

        XTTProperties.printDebug(this.getClass().getName()+".initialize(): clearing variables");
    }


    /**
     * constructor sets SIP.
     */
    public FunctionModule_SIP()
    {
        //do not do this, parser will initialize!
        //initialize();
    }

    /**
     * Overriden from superclass to add the SIPServer and SIPWorker version numbers.
     *
     * @see SIPServer
     * @see SIPWorker
     */
    public void printVersion()
    {
        super.printVersion();
        XTTProperties.printDebug(this.getClass().getName()+": SIPServer: "+parseVersion(SIPServer.tantau_sccsid));
        XTTProperties.printDebug(this.getClass().getName()+": SIPWorker: "+parseVersion(SIPWorker.tantau_sccsid));
    }
    public void showVersions()
    {
        super.showVersions();
        System.out.println(ConvertLib.createString(this.getClass().getName()+": SIPServer: ",SHOWLENGTH) + parseVersion(SIPServer.tantau_sccsid));
        System.out.println(ConvertLib.createString(this.getClass().getName()+": SIPWorker: ",SHOWLENGTH) + parseVersion(SIPWorker.tantau_sccsid));
    }

    /**
     * Returns the Configuration Options as a String ready to copy/paste in a configuration file
     *
     */
    public String getConfigurationOptions()
    {
        return "    <!-- function module SIP -->"
        +"\n    <SIPServer>"
        +"\n        <!-- the udp/tcp listening port of the internal SIPServer -->"
        +"\n        <Port>5060</Port>"
        +"\n        <!-- the listening port of the internal secure-SIPServer -->"
        +"\n        <SecurePort>5061</SecurePort>"
        +"\n        <!-- timeout on client connections to the SIPServer -->"
        +"\n        <Timeout>30000</Timeout>"
        +"\n        <!-- time to wait on a \"wait\" function before continuing -->"
        +"\n        <waitTimeout>30000</waitTimeout>"
        +"\n        <!--"
        +"\n        <enableCertCheck/>"
        +"\n        -->"
        +"\n        <!-- set this to disable ALL responses generated by the SIP server -->"
        +"\n        <!--<disableResponse/>-->"
        +"\n        <!-- set this just to turn off the creation of Notify messages when getting a Subscribe -->"
        +"\n        <!--<disableAutoNotify/>-->"
        +"\n    </SIPServer>"
        +"\n    <!-- function module SIP -->"
        +"\n    <SIP>"
        +SIPConnection.getConfigurationOptions()
        +"\n    </SIP>";
    }


    public void createConnection(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": createConnection: name serverPort serverSSLPort");
            return;
        }
        if(parameters.length!=4)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": name serverPort serverSSLPort");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            String name=parameters[1];
            String serverPort=parameters[2];
            String serverSSLPort=parameters[3];
            try
            {
                if(SIPServer.checkSocket(serverPort))
                {
                    XTTProperties.printFail(parameters[0] + ": No running server found on port "+serverPort);
                    XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                    return;
                }
                SIPConnection connection=defaultConnection.createConnection(name,serverPort,serverSSLPort);
                connections.put(name.toLowerCase(),connection);
                SIPConnection.getConnection(connections,defaultConnection,parameters);
                XTTProperties.printInfo(parameters[0] + ": created connection '"+name+"'");
            } catch (Exception uhe)
            {
                XTTProperties.printFail(parameters[0] + ":: Unable to create connection '"+name+"': "+uhe.getMessage());
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(uhe);
                }
            }
        }
    }

    /**
     * Creates a new connection and assigns the first running Worker on the TCP Socket to the connection instance class so that the same socket is used to send messages.
     * For UDP this works the same as createConnection.
     * 
     * @param parameters
     *            array of String containing the parameters. <br>
     *            <code>parameters[0]</code> argument is always the method name, <br>
     *            <code>parameters[1]</code> argument the name for the connection, <br>
     *            <code>parameters[2]</code> argument is the is the TCP/UDP server port
     *            <code>parameters[2]</code> argument is the is the SSL server port
     *            port which handles the responses, <br>
     *            If null is used as <code>parameters</code> it sends the
     *            allowed parameters list to the
     *            {@link XTTProperties#printFail(java.lang.String)
     *            XTTProperties.printFail(java.lang.String)} method and returns.
     * @see XTTProperties
     */
    public void getConnection(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": getConnection: name serverPort serverSSLPort");
            return;
        }
        if(parameters.length!=4)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": name serverPort serverSSLPort");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            String name=parameters[1];
            String serverPort=parameters[2];
            String serverSSLPort=parameters[3];
            try
            {
                if(SIPServer.checkSocket(serverPort))
                {
                    XTTProperties.printFail(parameters[0] + ": No running server found on port "+serverPort);
                    XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                    return;
                }
                SIPConnection connection=defaultConnection.createConnection(name,serverPort,serverSSLPort);
                connections.put(name.toLowerCase(),connection);
                SIPConnection con=SIPConnection.getConnection(connections,defaultConnection,parameters);
                SIPWorker worker=SIPServer.getWorker(serverPort);
                con.setSocket(worker);
                XTTProperties.printInfo(parameters[0] + ": got connection '"+name+"' "+worker.getSocket());
            } catch (Exception uhe)
            {
                XTTProperties.printFail(parameters[0] + ":: Unable to get connection '"+name+"': "+uhe.getMessage());
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(uhe);
                }
            }
        }
    }
    
   /**
     * starts the SIPServer as an instance of SIPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the SIPServer port,
     *                     <br><code>parameters[2]</code> is the SIPServer root directory,
     *                     <br><code>parameters[3]</code> argument is the SIPServer timeout.
     *                     <br>If only <code>parameters[0]</code> is submitted
     *                     the parameters will be taken from the configuration xml document in XTTProperties.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPServer
     * @see XTTProperties
     */
    public boolean startSIPServer(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": startSIPServer:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": startSIPServer: port secureport timeOut");
            return false;
        }/*
        return startSIPServer(parameters);
    }

    private boolean startSIPServer(String parameters[])
    {*/
        if(parameters.length == 1)
        {
            XTTProperties.printWarn(parameters[0] + ": Using default settings");
            try
            {
                XTTProperties.printVerbose(parameters[0] + ": Starting SIPServer");
                s = new SIPServer(XTTProperties.getIntProperty("SIPSERVER/PORT"), XTTProperties.getIntProperty("SIPSERVER/SECUREPORT"),XTTProperties.getIntProperty("SIPSERVER/TIMEOUT"));
                ws=(new Thread(s, "SIPServer"));
                ws.start();
                XTTProperties.printDebug(parameters[0] + ": Started SIPServer");
                return true;
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0]+": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else if (parameters.length == 4)
        {
            try
            {
                XTTProperties.printVerbose(parameters[0] + ": Starting SIPServer");
                s = new SIPServer(Integer.parseInt(parameters[1]), Integer.parseInt(parameters[2]), Integer.parseInt(parameters[3]));
                ws=(new Thread(s, "SIPServer"));
                ws.start();
                XTTProperties.printDebug(parameters[0] + ": Started SIPServer");
                return true;
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0]+": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": port secureport timeOut");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        }
        return false;

    }


    /**
     * stops all/one SIPServers and all it's threads.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired,
     *                     <br>the optional <code>parameters[1]</code> argument is the SIPServer port of the SIPServer to stop, if omitted all running servers are stopped.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPServer#closeSocket(String)
     * @see SIPServer#closeSockets()
     */
    public boolean stopSIPServer(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": stopSIPServer:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": stopSIPServer: port");
            return false;
        }
        if(parameters.length==2)
        {
            try
            {
                XTTProperties.printInfo(parameters[0] + ": Stopping SIPServer on port "+parameters[1]);
                SIPServer.closeSocket(parameters[1]);
                return true;
            }catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else
        {
            XTTProperties.printWarn(parameters[0] + ": Stopping all SIPServers");
            try
            {
                SIPServer.closeSockets();
                return true;
            }catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;

    }


    /**
     * Overrides the normal SIP Return code with a custom code.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> is an integer representing the sip code (0 or less means no override).
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#setOverrideReturnCode(int)
     */
    public void setServerReturnCode(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnCode: sipReturnCode");
            return;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": sipReturnCode");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            try
            {
                if(Integer.parseInt(parameters[1])>0)
                {
                    SIPWorker.setOverrideReturnCode(Integer.parseInt(parameters[1]));
                    XTTProperties.printInfo(parameters[0] + ": setting OverrideReturnCode to "+parameters[1]);
                } else
                {
                    SIPWorker.setOverrideReturnCode(0);
                    XTTProperties.printInfo(parameters[0] + ": disabling OverrideReturnCode");
                }
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0] + ": '"+parameters[1]+"' is NOT a number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch (Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": error setting OverrideReturnCode");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /**
     * Overrides the normal SIP Return Message with a custom code.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> is the Message after the response code including the whitespace between message and response code (for "SIP/2.0 200 Ok" it would be " Ok").
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#setOverrideReturnCode(int)
     */
    public void setServerReturnMessage(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnMessage:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnMessage: httpReturnMessage");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": httpReturnMessage");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
                if(parameters.length==1)
                {
                    XTTProperties.printInfo(parameters[0] + ": disabling OverrideReturnMessage");
                    SIPWorker.setOverrideReturnMessage(null);
                } else
                {
                    XTTProperties.printInfo(parameters[0] + ": setting OverrideReturnMessage to '"+parameters[1]+"'");
                    SIPWorker.setOverrideReturnMessage(parameters[1]);
                }
        }
    }

    /**
     * remove all the headers that are to be sent from the client to the server.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     *//*
    public void clearHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": clearHeader:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": clearHeader: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            SIPConnection.getConnection(connections,defaultConnection,parameters).getRequestHeader().clear();
            XTTProperties.printInfo(parameters[0] + ": clearing header");
        }
    }*/

    /**
     * remove all the headers that are to be sent from the server to the client.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#setServerSendHeader
     */
    public void clearServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": clearServerHeader:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            XTTProperties.printInfo(parameters[0] + ": clearing header");
            SIPWorker.setServerSendHeader(new LinkedHashMap<String,Vector<String>>());
        }
    }

    /**
     * set the http headers to be sent from the client to the server.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the header value or not present removing.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     *//*
    public void setHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: headerFieldKey headerFieldValue");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: connection headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: connection headerFieldKey headerFieldValue");
            return;
        }
        SIPConnection.setHeader(connections,defaultConnection,parameters);
    }*/

    /**
     * set the http headers to be sent from the server to the client.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     *
     * @see SIPWorker#getServerSendHeader
     */
    public void setServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setServerHeader: headerFieldKey headerFieldValue");
            return;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey headerFieldValue");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            //HTTPHelper.setHeader(SIPWorker.getServerSendHeader(),parameters);
            LinkedHashMap<String,Vector<String>> headers=SIPWorker.getServerSendHeader();
            if(parameters.length==3&&!parameters[2].equals("null"))
            {
                String newVal=parameters[2];
                // Actually set the Header Key and Value
                Vector<String> values=headers.get(parameters[1].trim());
                if(values==null)values=new Vector<String>();
                values.add(newVal);
                headers.put(parameters[1].trim(),values);
                XTTProperties.printInfo(parameters[0]+": setting HeaderField "+parameters[1]+" to: "+values);
            } else
            {
                XTTProperties.printInfo(parameters[0]+": removing HeaderField "+parameters[1]);
                // Actually remove the Header Key and Value
                headers.remove(parameters[1].trim());
            }
        }
    }

    /**
     * compare the http headers received by the server from the client with a value which is required.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeader: headerFieldKey expectedValue");
            return;
        }
        HTTPHelper.checkHeader(SIPWorker.getServerHeader(),parameters,false);
    }

    /**
     * query the http headers received by the server from the client with a regular expression.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable to store the result to,
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the regular expression.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void queryServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerHeader: variable headerFieldKey regularExpression");
            return;
        }
        if(parameters.length<4)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": variable headerFieldKey regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            HTTPHelper.queryHeader(SIPWorker.getServerHeader(),parameters,false);
        }
    }
    /**
     * query the http headers received by the server from the client with a regular expression.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable to store the result to,
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the regular expression.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void queryServerHeaderNegative(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerHeaderNegative: headerFieldKey regularExpression");
            return;
        }
        if(parameters.length!=3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            HTTPHelper.queryHeader(SIPWorker.getServerHeader(),parameters,true);
        }
    }
    /**
     * compare the http headers received by the server from the client with a value which it is prohibited.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerHeaderNot(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeaderNot: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeaderNot: headerFieldKey expectedValue");
            return;
        }
        HTTPHelper.checkHeader(SIPWorker.getServerHeader(),parameters,true);
    }

    /**
     * compare the url received by the server from the client with a value.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the url value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerURL(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerURL: URL");
            return;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": URL");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
             String surl=parameters[1];
            if(surl.equals(SIPWorker.getServerRecievedURL()))
            {
                XTTProperties.printInfo(parameters[0]+": found URL "+SIPWorker.getServerRecievedURL());
            } else
            {
                XTTProperties.printFail(parameters[0]+": found URL "+SIPWorker.getServerRecievedURL()+" wanted "+surl);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /**
     * query if the URL of a http request recieved by the server contains a specified regular expression value.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable name to store the result in,
     *                     <br><code>parameters[2]</code> argument is the java reqular expression pattern.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public boolean queryServerURL(String[] parameters)
    {
        if(parameters == null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerURL: variableName regularExpression");
            return false;
        }
        if(parameters.length!=3)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        }
        else
        {
            XTTProperties.printDebug(parameters[0]+": regex: '"+parameters[2]+"'");
            return ConvertLib.queryString(parameters[0],SIPWorker.getServerRecievedURL(),parameters[2],parameters[1]);
        }
    }

    /**
     * disable certificate checking on https connections.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#setServerSendHeader
     */
     /*
    public void disableCertCheck(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableCertCheck:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": disableCertCheck: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            return;
        }
        SIPConnection.getConnection(connections,defaultConnection,parameters).setEnableCertcheck(false);
        XTTProperties.printInfo(parameters[0] + ": Disabling default Java Certificate Trust Manager");
    }*/

    /**
     * enable certificate checking on https connections.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#setServerSendHeader
     */
     /*
    public void enableCertCheck(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableCertCheck:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": enableCertCheck: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            return;
        }
        SIPConnection.getConnection(connections,defaultConnection,parameters).setEnableCertcheck(true);
        XTTProperties.printInfo(parameters[0] + ": Enabling default Java Certificate Trust Manager");
    }*/

    public void disableAuthentication(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableAuthentication:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setAuthentication(false);
        XTTProperties.printInfo(parameters[0] + ": Disabling Authentication");
    }
    public void enableAuthentication(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableAuthentication:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setAuthentication(true);
        XTTProperties.printInfo(parameters[0] + ": Enabling Authentication");
    }
    public void disableResponse(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableResponse:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setSkipResponse(true);
        XTTProperties.printInfo(parameters[0] + ": Disabling sending of Response to request");
    }
    public void enableResponse(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableResponse:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setSkipResponse(false);
        XTTProperties.printInfo(parameters[0] + ": Enabling sending of Response to request");
    }
    public void disableAutoNotify(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableAutoNotify:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setSkipAutoNotify(true);
        XTTProperties.printInfo(parameters[0] + ": Disabling sending of automatic Notify to Subscribe");
    }
    public void enableAutoNotify(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableAutoNotify:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        SIPWorker.setSkipAutoNotify(false);
        XTTProperties.printInfo(parameters[0] + ": Enabling sending of automatic Notify to Subscribe");
    }

    /** 
     * Since the connection does never get closed you can manually close a connection if desired, otherwise it should time out after the timeout time and remove the socket.
    */
    public void closeConnection(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": closeConnection:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": closeConnection: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            SIPConnection.getConnection(connections,defaultConnection,parameters).closeConnection();
            XTTProperties.printInfo(parameters[0] + ": closed connection.");
        }
    }
    /**
     * wait for a specified number of SIP requests on the SIPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the optional connection name.
     *                     <br><code>parameters[2]</code> argument is the remote host to connect to.
     *                     <br><code>parameters[3]</code> argument is the remote port to connect to.
     *                     <br><code>parameters[4]</code> argument is either TCP or UDP.
     *                     <br><code>parameters[5]</code> argument is the complete headers of the request INCLUDING the empty line seperating headers and body (End every line with CRLF).
     *                     <br><code>parameters[6]</code> argument is the optional base64encoded body (don't forget to add content-length headers).
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPConnection#sendRequest(String,String,int,String,String,String)
     */
    public void sendFreeRequest(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": sendFreeRequest: remoteHost remotePort protocol headers base64Body");
            XTTProperties.printFail(this.getClass().getName()+": sendFreeRequest: connection remoteHost remotePort protocol headers base64Body");
            return;
        }
        if(parameters.length<5||parameters.length>7)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": remoteHost remotePort protocol headers base64Body");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection remoteHost remotePort protocol headers base64Body");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            SIPConnection connection=SIPConnection.getConnection(connections,defaultConnection,parameters);
            int offset=1;
            if(connection==defaultConnection)
            {
                offset=0;
            }
            String funcname     = parameters[0];
            String remoteHost   = parameters[1+offset];
            int remotePort      = 5060;
            try
            {
                remotePort=Integer.decode(parameters[2+offset]);
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[2+offset]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                return;
            }
            String protocol     = parameters[3+offset];
            String headers      = parameters[4+offset];
            String body=null;
            if(parameters.length>(5+offset))
            {
                body            = parameters[5+offset];
            }
            try
            {
                connection.sendRequest(funcname, remoteHost, remotePort, protocol, headers, body);
            } catch (Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }


    /**
     * wait for a specified number of SIP requests on the SIPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of requests.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#waitForRequests(int)
     */
    public boolean waitForRequests(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForRequests: numRequests");
            return false;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": numRequests");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int messages=Integer.parseInt(parameters[1]);
                XTTProperties.printInfo(parameters[0] + ": waiting for "+messages+" SIP-Requests received on SIPServer");
                SIPWorker.waitForRequests(messages);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;
    }
    /**
     * wait for a specified number of SIP requests on the SIPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of requests.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see SIPWorker#waitForTimeoutRequests(int,int)
     */
    public boolean waitForTimeoutRequests(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutRequests: timeoutms");
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutRequests: timeoutms maxPreviousRequests");
            return false;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms maxPreviousRequests");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int timeoutms=Integer.parseInt(parameters[1]);
                int maxnumber=-1;
                if(parameters.length==3)
                {
                    try
                    {
                        maxnumber=Integer.parseInt(parameters[2]);
                    } catch (NumberFormatException nfe2)
                    {
                        XTTProperties.printFail(parameters[0]+": '"+parameters[2]+"' is NOT a correct number");
                        XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                        return false;
                    }
                }
                XTTProperties.printInfo(parameters[0] + ": waiting for "+timeoutms+"ms and NO requests on SIPServer");
                SIPWorker.waitForTimeoutRequests(timeoutms,maxnumber);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;

    }

    public void lastWorkerIdToVariable(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setVariable: variableName");
            XTTProperties.printFail(this.getClass().getName()+": setVariable: variableName serverPort");
            return;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName");
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName serverPort");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            int port=0;
            if(parameters.length != 3)
            {
                    port=XTTProperties.getIntProperty("SIPSERVER/PORT");
            }
            else
            {
                try
                {
                    port=Integer.parseInt(parameters[2]);
                } catch (NumberFormatException nfe)
                {
                    XTTProperties.printFail(parameters[0] + ": '"+parameters[2]+"' is NOT a number");
                    XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                }
            }
            int numworkers=SIPServer.getLastWorkerId(port+"");
            XTTProperties.printInfo(parameters[0]+": stored '"+numworkers+"' to "+parameters[1]);
            XTTProperties.setVariable(parameters[1],""+numworkers);
        }
    }

    /**
     * Called for selftest purposes to see if this FunctionModules resources are avaiable.
     *
     */
    public String checkResources()
    {
        int securePort = XTTProperties.getIntProperty("SIPSERVER/SECUREPORT");
        int standardPort = XTTProperties.getIntProperty("SIPSERVER/PORT");

        String resourceString = null;

        try
        {
            if(standardPort>0)
            {
                java.net.ServerSocket stndrdPrt = new java.net.ServerSocket(standardPort);
                stndrdPrt.close();
            }
        }
        catch(java.net.BindException be)
        {
            resourceString = "" + this.getClass().getName() + ": Unavailable port '" +  standardPort + "'";
        }
        catch(java.io.IOException ioe){}

        try
        {
            if(securePort>0)
            {
                java.net.ServerSocket scrPrt =  new java.net.ServerSocket(securePort);
                scrPrt.close();
            }
        }
        catch(java.net.BindException be)
        {
            if(resourceString==null)
            {
                resourceString = "" + this.getClass().getName() + ": Unavailable port  '" +  securePort + "'";
            }
            else
            {
                resourceString += ",'" +  securePort + "'";
            }
        }
        catch(java.io.IOException ioe){}

        if(resourceString == null)
        {
            resourceString = "" + this.getClass().getName() + ": OK";
        }

        return resourceString;
    }

    /**
     * returns the getClass().getName() of this object. For debug reasons only.
     */
    public String toString()
    {
        return this.getClass().getName();
    }

    public static final String tantau_sccsid = "@(#)$Id: FunctionModule_SIP.java,v 1.15 2009/06/05 12:38:19 rsoder Exp $";


}

