package com.mobixell.xtt;

import java.util.LinkedHashMap;
import java.util.Vector;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;


/**
 * FunctionModule_HTTP provides RTSP and RTSPS GET functions.
 *
 * @author      Roger Soder
 * @version     $Id: FunctionModule_RTSP.java,v 1.7 2009/09/16 11:27:09 rsoder Exp $
 */
public class FunctionModule_RTSP extends FunctionModule
{
    private Map<String,RTSPConnection> connections = Collections.synchronizedMap(new HashMap<String,RTSPConnection>());
    private RTSPServer s             = null;
    private Thread ws               = null;
    private final static String CRLF= "\r\n";

    private RTSPConnection defaultConnection = null;

    private static javax.net.ssl.HostnameVerifier defaultHostnameVerifier=null;
    private static javax.net.ssl.SSLSocketFactory defaultSSLSocketFactory=null;



    /**
     * clears and reinitializes all the variables. Does reset the RTSP.
     */
    public void initialize()
    {
        defaultConnection=new RTSPConnection("DEFAULT","RTSP");
        defaultConnection.readConfiguration();

        RTSPWorker.setServerSendHeader(new LinkedHashMap<String,Vector<String>>());
        RTSPWorker.init();
        RTSPServer.resetWorkerId();
        String skipResponse=XTTProperties.getProperty("RTSPSERVER/DISABLERESPONSE");
        if(!skipResponse.equals("null"))
        {
            RTSPWorker.setSkipResponse(true);
        }
        String disableSessionID=XTTProperties.getProperty("RTSPSERVER/DISABLEAUTOSESSIONID");
        if(!disableSessionID.equals("null"))
        {
            RTSPWorker.setSkipAutoSessionID(true);
        }

        XTTProperties.printDebug(this.getClass().getName()+".initialize(): clearing variables");
    }


    /**
     * constructor sets RTSP.
     */
    public FunctionModule_RTSP()
    {
        //do not do this, parser will initialize!
        //initialize();
    }

    /**
     * Overriden from superclass to add the RTSPServer and RTSPWorker version numbers.
     *
     * @see RTSPServer
     * @see RTSPWorker
     */
    public void printVersion()
    {
        super.printVersion();
        XTTProperties.printDebug(this.getClass().getName()+": RTSPServer: "+parseVersion(RTSPServer.tantau_sccsid));
        XTTProperties.printDebug(this.getClass().getName()+": RTSPWorker: "+parseVersion(RTSPWorker.tantau_sccsid));
    }
    public void showVersions()
    {
        super.showVersions();
        System.out.println(ConvertLib.createString(this.getClass().getName()+": RTSPServer: ",SHOWLENGTH) + parseVersion(RTSPServer.tantau_sccsid));
        System.out.println(ConvertLib.createString(this.getClass().getName()+": RTSPWorker: ",SHOWLENGTH) + parseVersion(RTSPWorker.tantau_sccsid));
    }

    /**
     * Returns the Configuration Options as a String ready to copy/paste in a configuration file
     *
     */
    public String getConfigurationOptions()
    {
        return "    <!-- function module RTSP -->"
        +"\n    <RTSPServer>"
        +"\n        <!-- the udp/tcp listening port of the internal RTSPServer -->"
        +"\n        <Port>554</Port>"
        +"\n        <!-- the udp/tcp listening port for responses/requests to the client -->"
        +"\n        <clientPort>555</clientPort>"
        //+"\n        <!-- the listening port of the internal secure-RTSPServer -->"
        //+"\n        <SecurePort>5554</SecurePort>"
        +"\n        <!-- the root directory for the responses, default is the test's directory -->"
        +"\n        <!--<RootDir>.</RootDir>-->"
        +"\n        <!-- timeout on client connections to the RTSPServer -->"
        +"\n        <Timeout>30000</Timeout>"
        +"\n        <!-- time to wait on a \"wait\" function before continuing -->"
        +"\n        <waitTimeout>30000</waitTimeout>"
        +"\n        <!--"
        +"\n        <enableCertCheck/>"
        +"\n        -->"
        //+"\n        <!-- set this to disable ALL responses generated by the RTSP server -->"
        //+"\n        <!--<disableResponse/>-->"
        +"\n        <!-- set this just to turn off the creation of SessionIds for requests who don't have one -->"
        +"\n        <!--<disableAutoSessionID/>-->"
        +"\n    </RTSPServer>"
        +"\n    <!-- function module RTSP -->"
        +"\n    <RTSP>"
        +RTSPConnection.getConfigurationOptions()
        +"\n    </RTSP>";
    }


   /**
     * Creates a connection.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument the name for the connection,
     *                     <br><code>parameters[2]</code> argument is the is the RTSPServer port which handles the responses,
     *                     <br>If only <code>parameters[0]</code> is submitted
     *                     the parameters will be taken from the configuration xml document in XTTProperties.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see XTTProperties
     */
    public void createConnection(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": createConnection: name serverPort");
            return;
        }
        if(parameters.length!=3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": name serverPort");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            String name=parameters[1];
            String serverPort=parameters[2];
            //String serverSSLPort=parameters[3];
            try
            {
                if(RTSPServer.checkSocket(serverPort))
                {
                    XTTProperties.printFail(parameters[0] + ": No running server found on port "+serverPort);
                    XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                    return;
                }
                RTSPConnection connection=defaultConnection.createConnection(name,serverPort);
                connections.put(name.toLowerCase(),connection);
                RTSPConnection.getConnection(connections,defaultConnection,parameters);
                XTTProperties.printInfo(parameters[0] + ": created connection '"+name+"'");
            } catch (Exception uhe)
            {
                XTTProperties.printFail(parameters[0] + ":: Unable to set create connection '"+name+"': "+uhe.getMessage());
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(uhe);
                }
            }
        }
    }
   /**
     * starts the RTSPServer as an instance of RTSPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the RTSPServer port,
     *                     <br><code>parameters[2]</code> argument is the RTSPServer timeout.
     *                     <br><code>parameters[3]</code> is the RTSPServer root directory,
     *                     <br>If only <code>parameters[0]</code> is submitted
     *                     the parameters will be taken from the configuration xml document in XTTProperties.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPServer
     * @see XTTProperties
     */
    public void startRTSPServer(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": startRTSPServer:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": startRTSPServer: port timeOut rootDir");
            return;
        }
        startRTSPServer(parameters,false);
    }

    private void startRTSPServer(String parameters[],boolean isSecure)
    {
        String secure="";
        String secures="";
        if(isSecure)secure="SECURE"; 
        if(isSecure)secures="secure "; 
        if(parameters.length == 1)
        {
            try
            {
                XTTProperties.printVerbose(parameters[0] + ": Starting RTSPServer");
                String rootDir=XTTProperties.getProperty("RTSPSERVER/ROOTDIR");
                if(rootDir==null||rootDir.equals("null"))
                {
                    rootDir=XTTProperties.getCurrentTestPath();
                }
                java.io.File f=new java.io.File(rootDir);
                if(!f.isDirectory())
                {
                    XTTProperties.printFail(parameters[0] + ": Not a directory: "+rootDir+"\n");
                    XTTProperties.setTestStatus(XTTProperties.FAILED);
                    return;
                }
                s = new RTSPServer(XTTProperties.getIntProperty("RTSPSERVER/"+secure+"PORT"),isSecure,XTTProperties.getIntProperty("RTSPSERVER/TIMEOUT"),rootDir);
                ws=(new Thread(s, "RTSPServer"));
                ws.start();
                XTTProperties.printDebug(parameters[0] + ": Started "+secures+"RTSPServer");
                return;
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0]+": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else if (parameters.length == 4)
        {
            try
            {
                XTTProperties.printVerbose(parameters[0] + ": Starting "+secures+"RTSPServer");
                String rootDir=parameters[3];
                java.io.File f=new java.io.File(rootDir);
                if(!f.isDirectory())
                {
                    XTTProperties.printFail(parameters[0] + ": Not a directory: "+rootDir+"\n");
                    XTTProperties.setTestStatus(XTTProperties.FAILED);
                    return;
                }
                s = new RTSPServer(Integer.parseInt(parameters[1]), isSecure, Integer.parseInt(parameters[2]),rootDir);
                ws=(new Thread(s, "RTSPServer"));
                ws.start();
                XTTProperties.printDebug(parameters[0] + ": Started "+secures+"RTSPServer");
                return;
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0]+": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": port timeOut rootDir");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        }
        return;

    }


    /**
     * stops all/one RTSPServers and all it's threads.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired,
     *                     <br>the optional <code>parameters[1]</code> argument is the RTSPServer port of the RTSPServer to stop, if omitted all running servers are stopped.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPServer#closeSocket(String)
     * @see RTSPServer#closeSockets()
     */
    public void stopRTSPServer(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": stopRTSPServer:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": stopRTSPServer: port");
            return;
        }
        if(parameters.length==2)
        {
            try
            {
                XTTProperties.printInfo(parameters[0] + ": Stopping RTSPServer on port "+parameters[1]);
                RTSPServer.closeSocket(parameters[1]);
                return;
            }catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        } else
        {
            XTTProperties.printWarn(parameters[0] + ": Stopping all RTSPServers");
            try
            {
                RTSPServer.closeSockets();
                return;
            }catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return;

    }


    /**
     * Overrides the normal RTSP Return code with a custom code.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> is an integer representing the rtsp code (0 or less means no override).
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setOverrideReturnCode(int)
     */
    public void setServerReturnCode(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnCode: rtspReturnCode");
            return;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": rtspReturnCode");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            try
            {
                if(Integer.parseInt(parameters[1])>0)
                {
                    RTSPWorker.setOverrideReturnCode(Integer.parseInt(parameters[1]));
                    XTTProperties.printInfo(parameters[0] + ": setting OverrideReturnCode to "+parameters[1]);
                } else
                {
                    RTSPWorker.setOverrideReturnCode(0);
                    XTTProperties.printInfo(parameters[0] + ": disabling OverrideReturnCode");
                }
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0] + ": '"+parameters[1]+"' is NOT a number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch (Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": error setting OverrideReturnCode");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /**
     * Overrides the normal RTSP Return Message with a custom code.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> is the Message after the response code including the whitespace between message and response code (for "RTSP/2.0 200 Ok" it would be " Ok").
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setOverrideReturnCode(int)
     */
    public void setServerReturnMessage(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnMessage:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": setServerReturnMessage: rtspReturnMessage");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": rtspReturnMessage");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
                if(parameters.length==1)
                {
                    XTTProperties.printInfo(parameters[0] + ": disabling OverrideReturnMessage");
                    RTSPWorker.setOverrideReturnMessage(null);
                } else
                {
                    XTTProperties.printInfo(parameters[0] + ": setting OverrideReturnMessage to '"+parameters[1]+"'");
                    RTSPWorker.setOverrideReturnMessage(parameters[1]);
                }
        }
    }

    /**
     * remove all the headers that are to be sent from the client to the server.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void clearHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": clearHeader:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": clearHeader: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            RTSPConnection.getConnection(connections,defaultConnection,parameters).getRequestHeader().clear();
            XTTProperties.printInfo(parameters[0] + ": clearing header");
        }
    }

    /**
     * remove all the headers that are to be sent from the server to the client.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
    public void clearServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": clearServerHeader:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            XTTProperties.printInfo(parameters[0] + ": clearing header");
            RTSPWorker.setServerSendHeader(new LinkedHashMap<String,Vector<String>>());
        }
    }

    /**
     * set the rtsp headers to be sent from the client to the server.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the header value or not present removing.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void setHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: headerFieldKey headerFieldValue");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: connection headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setHeader: connection headerFieldKey headerFieldValue");
            return;
        }
        RTSPConnection.setHeader(connections,defaultConnection,parameters);
    }

    /**
     * set the rtsp headers to be sent from the server to the client.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     *
     * @see RTSPWorker#getServerSendHeader
     */
    public void setServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setServerHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": setServerHeader: headerFieldKey headerFieldValue");
            return;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey headerFieldValue");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            //HTTPHelper.setHeader(RTSPWorker.getServerSendHeader(),parameters);
            LinkedHashMap<String,Vector<String>> headers=RTSPWorker.getServerSendHeader();
            if(parameters.length==3&&!parameters[2].equals("null"))
            {
                String newVal=parameters[2];
                // Actually set the Header Key and Value
                Vector<String> values=headers.get(parameters[1].trim());
                if(values==null)values=new Vector<String>();
                values.add(newVal);
                headers.put(parameters[1].trim(),values);
                XTTProperties.printInfo(parameters[0]+": setting HeaderField "+parameters[1]+" to: "+values);
            } else
            {
                XTTProperties.printInfo(parameters[0]+": removing HeaderField "+parameters[1]);
                // Actually remove the Header Key and Value
                headers.remove(parameters[1].trim());
            }
        }
    }

    /**
     * compare the rtsp headers received by the server from the client with a value which is required.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeader: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeader: headerFieldKey expectedValue");
            return;
        }
        HTTPHelper.checkHeader(RTSPWorker.getServerHeader(),parameters,false);
    }

    /**
     * query the rtsp headers received by the server from the client with a regular expression.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable to store the result to,
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the regular expression.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void queryServerHeader(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerHeader: variable headerFieldKey regularExpression");
            return;
        }
        if(parameters.length<4)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": variable headerFieldKey regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            HTTPHelper.queryHeader(RTSPWorker.getServerHeader(),parameters,false);
        }
    }
    /**
     * query the rtsp headers received by the server from the client with a regular expression.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable to store the result to,
     *                     <br><code>parameters[2]</code> argument is the header key,
     *                     <br><code>parameters[3]</code> argument is the regular expression.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void queryServerHeaderNegative(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerHeaderNegative: headerFieldKey regularExpression");
            return;
        }
        if(parameters.length!=3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": headerFieldKey regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            HTTPHelper.queryHeader(RTSPWorker.getServerHeader(),parameters,true);
        }
    }
    /**
     * compare the rtsp headers received by the server from the client with a value which it is prohibited.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the header key,
     *                     <br><code>parameters[2]</code> argument is the header value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerHeaderNot(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeaderNot: headerFieldKey");
            XTTProperties.printFail(this.getClass().getName()+": checkServerHeaderNot: headerFieldKey expectedValue");
            return;
        }
        HTTPHelper.checkHeader(RTSPWorker.getServerHeader(),parameters,true);
    }

    /**
     * compare the url received by the server from the client with a value.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the url value.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public void checkServerURL(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": checkServerURL: URL");
            return;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": URL");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
             String surl=parameters[1];
            if(surl.equals(RTSPWorker.getServerRecievedURL()))
            {
                XTTProperties.printInfo(parameters[0]+": found URL "+RTSPWorker.getServerRecievedURL());
            } else
            {
                XTTProperties.printFail(parameters[0]+": found URL "+RTSPWorker.getServerRecievedURL()+" wanted "+surl);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /**
     * query if the URL of a rtsp request recieved by the server contains a specified regular expression value.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the variable name to store the result in,
     *                     <br><code>parameters[2]</code> argument is the java reqular expression pattern.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     */
    public boolean queryServerURL(String[] parameters)
    {
        if(parameters == null)
        {
            XTTProperties.printFail(this.getClass().getName()+": queryServerURL: variableName regularExpression");
            return false;
        }
        if(parameters.length!=3)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName regularExpression");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        }
        else
        {
            XTTProperties.printDebug(parameters[0]+": regex: '"+parameters[2]+"'");
            return ConvertLib.queryString(parameters[0],RTSPWorker.getServerRecievedURL(),parameters[2],parameters[1]);
        }
    }

    /*
     * disable certificate checking on rtsps connections.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
     /*
    public void disableCertCheck(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableCertCheck:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": disableCertCheck: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            return;
        }
        RTSPConnection.getConnection(connections,defaultConnection,parameters).setEnableCertcheck(false);
        XTTProperties.printInfo(parameters[0] + ": Disabling default Java Certificate Trust Manager");
    }*/

    /*
     * enable certificate checking on rtsps connections.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
     /*
    public void enableCertCheck(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableCertCheck:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": enableCertCheck: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            return;
        }
        RTSPConnection.getConnection(connections,defaultConnection,parameters).setEnableCertcheck(true);
        XTTProperties.printInfo(parameters[0] + ": Enabling default Java Certificate Trust Manager");
    }*/
/*
    public void disableAuthentication(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableAuthentication:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setAuthentication(false);
        XTTProperties.printInfo(parameters[0] + ": Disabling Authentication");
    }
    public void enableAuthentication(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableAuthentication:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setAuthentication(true);
        XTTProperties.printInfo(parameters[0] + ": Enabling Authentication");
    }*/
    /*
     * disable the automatic sending of server side responses.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
    public void disableResponse(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableResponse:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setSkipResponse(true);
        XTTProperties.printInfo(parameters[0] + ": Disabling sending of Response to request");
    }
    /*
     * enable the automatic sending of server side responses.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
    public void enableResponse(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableResponse:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setSkipResponse(false);
        XTTProperties.printInfo(parameters[0] + ": Enabling sending of Response to request");
    }
    /*
     * disable the automatic generation of server side session ids.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
    public void disableAutoSessionID(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": disableAutoSessionID:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setSkipAutoSessionID(true);
        XTTProperties.printInfo(parameters[0] + ": Disabling automatic session ids");
    }
    /*
     * enable the automatic generation of server side session ids.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setServerSendHeader
     */
    public void enableAutoSessionID(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": enableAutoSessionID:"+NO_ARGUMENTS);
            return;
        }
        if(parameters.length!=1)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            return;
        }
        RTSPWorker.setSkipAutoSessionID(false);
        XTTProperties.printInfo(parameters[0] + ": Enabling automatic session ids");
    }

    /** 
     * Since the connection does never get closed you can manually close a connection if desired, otherwise it should time out after the timeout time and remove the socket.
    */
    public void closeConnection(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": closeConnection:"+NO_ARGUMENTS);
            XTTProperties.printFail(this.getClass().getName()+": closeConnection: connection");
            return;
        }
        if(parameters.length<1||parameters.length>2)
        {
            XTTProperties.printFail(parameters[0] + ":"+NO_ARGUMENTS);
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            RTSPConnection.getConnection(connections,defaultConnection,parameters).closeConnection();
            XTTProperties.printInfo(parameters[0] + ": closed connection.");
        }
    }

    /*
     * Send a free rtsps request.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br><code>parameters[2]</code> remoteHost to connect to,
     *                     <br><code>parameters[3]</code> remotePort to connect to,
     *                     <br><code>parameters[4]</code> protocol either UDP or TCP,
     *                     <br><code>parameters[5]</code> headers as crlf devided lines, first line has to be method etc.
     *                     <br><code>parameters[6]</code> base64Body encoded body to send,
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPConnection#sendRequest
     */
    public void sendFreeRequest(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": sendFreeRequest: remoteHost remotePort protocol headers base64Body");
            XTTProperties.printFail(this.getClass().getName()+": sendFreeRequest: connection remoteHost remotePort protocol headers base64Body");
            return;
        }
        if(parameters.length<5||parameters.length>7)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": remoteHost remotePort protocol headers base64Body");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection remoteHost remotePort protocol headers base64Body");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            RTSPConnection connection=RTSPConnection.getConnection(connections,defaultConnection,parameters);
            int offset=1;
            if(connection==defaultConnection)
            {
                offset=0;
            }
            String funcname     = parameters[0];
            String remoteHost   = parameters[1+offset];
            int remotePort      = 5060;
            try
            {
                remotePort=Integer.decode(parameters[2+offset]);
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[2+offset]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                return;
            }
            String protocol     = parameters[3+offset];
            String headers      = parameters[4+offset];
            String body=null;
            if(parameters.length>(5+offset))
            {
                body            = parameters[5+offset];
            }
            try
            {
                connection.sendRequest(funcname, remoteHost, remotePort, protocol, headers, body);
            } catch (Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /*
     * Send a free rtsps request.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name, no additional parameters are requeired.
     *                     <br><code>parameters[1]</code> connection name (or not present for default),
     *                     <br><code>parameters[2]</code> rtsp method to use in UPPERCASE,
     *                     <br><code>parameters[3]</code> rtsp or rtspu url,
     *                     <br><code>parameters[4]</code> base64Body encoded body to send, content-length header has to be added manually
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPConnection#sendRTSPRequest
     */
    public void sendRTSPRequest(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": sendRTSPRequest: rtspMethod url base64Body");
            XTTProperties.printFail(this.getClass().getName()+": sendRTSPRequest: connection rtspMethod url base64Body");
            return;
        }
        if(parameters.length<4||parameters.length>5)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": rtspMethod url base64Body");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": connection rtspMethod url base64Body");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            RTSPConnection connection=RTSPConnection.getConnection(connections,defaultConnection,parameters);
            int offset=1;
            if(connection==defaultConnection)
            {
                offset=0;
            }
            String funcname = parameters[0];
            String method   = parameters[1+offset];
            String url      = parameters[2+offset];
            String body     = parameters[3+offset];
            try
            {
                connection.sendRTSPRequest(funcname, method, url, body);
            } catch (Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": "+e.getClass().getName()+": "+e.getMessage());
                if(XTTProperties.printDebug(null))
                {
                    XTTProperties.printException(e);
                }
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
    }

    /**
     * wait for a specified number of RTSP responses on the RTSPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of responses.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#waitForResponses(int)
     */
    public boolean waitForResponses(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForResponses: numResponses");
            return false;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": numResponses");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int messages=Integer.parseInt(parameters[1]);
                XTTProperties.printInfo(parameters[0] + ": waiting for "+messages+" RTSP-Responses received on RTSPServer");
                RTSPWorker.waitForResponses(messages);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;
    }
    /**
     * wait for a specified number of RTSP requests on the RTSPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of requests.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#waitForResponses(int)
     */
    public boolean waitForRequests(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForRequests: numRequests");
            return false;
        }
        if(parameters.length!=2)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": numRequests");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int messages=Integer.parseInt(parameters[1]);
                XTTProperties.printInfo(parameters[0] + ": waiting for "+messages+" RTSP-Requests received on RTSPServer");
                RTSPWorker.waitForRequests(messages);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;
    }    
    /**
     * wait for timeout on specified number of RTSP responses on the RTSPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of responses.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#waitForTimeoutResponses(int,int)
     */
    public boolean waitForTimeoutResponses(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutResponses: timeoutms");
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutResponses: timeoutms maxPreviousResponses");
            return false;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms maxPreviousResponses");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int timeoutms=Integer.parseInt(parameters[1]);
                int maxnumber=-1;
                if(parameters.length==3)
                {
                    try
                    {
                        maxnumber=Integer.parseInt(parameters[2]);
                    } catch (NumberFormatException nfe2)
                    {
                        XTTProperties.printFail(parameters[0]+": '"+parameters[2]+"' is NOT a correct number");
                        XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                        return false;
                    }
                }
                XTTProperties.printInfo(parameters[0] + ": waiting for "+timeoutms+"ms and NO responses on RTSPServer");
                RTSPWorker.waitForTimeoutResponses(timeoutms,maxnumber);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;

    }

    /**
     * wait for timeout on specified number of RTSP requests on the RTSPServer.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the number of requests.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#waitForTimeoutResponses(int,int)
     */
    public boolean waitForTimeoutRequests(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutRequests: timeoutms");
            XTTProperties.printFail(this.getClass().getName()+": waitForTimeoutRequests: timeoutms maxPreviousRequests");
            return false;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms");
            XTTProperties.printFail(parameters[0] + ":"+MISSING_ARGUMENTS+": timeoutms maxPreviousRequests");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return false;
        } else
        {
            try
            {
                int timeoutms=Integer.parseInt(parameters[1]);
                int maxnumber=-1;
                if(parameters.length==3)
                {
                    try
                    {
                        maxnumber=Integer.parseInt(parameters[2]);
                    } catch (NumberFormatException nfe2)
                    {
                        XTTProperties.printFail(parameters[0]+": '"+parameters[2]+"' is NOT a correct number");
                        XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                        return false;
                    }
                }
                XTTProperties.printInfo(parameters[0] + ": waiting for "+timeoutms+"ms and NO requests on RTSPServer");
                RTSPWorker.waitForTimeoutRequests(timeoutms,maxnumber);
                return true;
            } catch (NumberFormatException nfe)
            {
                XTTProperties.printFail(parameters[0]+": '"+parameters[1]+"' is NOT a correct number");
                XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
            } catch(Exception e)
            {
                XTTProperties.printFail(parameters[0] + ": ERROR");
                XTTProperties.printException(e);
                XTTProperties.setTestStatus(XTTProperties.FAILED);
            }
        }
        return false;

    }

    /**
     * Set a file in cache of the rtspserver. This can be used to generate dynamic content during a test.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the filename of the file on the server relative
     *                     <br><code>parameters[2]</code> argument is the content of the file.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setCacheFileBase64(String,String,String)
     */
    public void setCacheFile(String[] parameters)
    {
        if(parameters == null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setCacheFile: rtspMethod fileName content");
            return;
        }
        if(parameters.length!=4)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": rtspMethod fileName content");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return;
        }
        else
        {
            RTSPWorker.setCacheFileBase64(parameters[1],parameters[2],ConvertLib.base64Encode(parameters[3]));
        }
    }
    /**
     * Set a file from base64 encoded source in cache of the rtspserver. This can be used to generate dynamic content during a test. the base64 file will be decoded and stored as binary.
     *
     * @param parameters   array of String containing the parameters.
     *                     <br><code>parameters[0]</code> argument is always the method name,
     *                     <br><code>parameters[1]</code> argument is the filename of the file on the server
     *                     <br><code>parameters[2]</code> argument is the content of the file.
     *                     <br>If null is used as <code>parameters</code> it sends the allowed parameters list
     *                     to the {@link XTTProperties#printFail(java.lang.String) XTTProperties.printFail(java.lang.String)} method and returns.
     * @see RTSPWorker#setCacheFileBase64(String,String,String)
     */
    public void setCacheFileBase64(String[] parameters)
    {
        if(parameters == null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setCacheFileBase64: rtspMethod fileName base64EncodedContent");
            return;
        }
        if(parameters.length!=4)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": rtspMethod fileName base64EncodedContent");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
            return;
        }
        else
        {
            RTSPWorker.setCacheFileBase64(parameters[1],parameters[2],parameters[3]);
        }
    }

    public void lastWorkerIdToVariable(String parameters[])
    {
        if(parameters==null)
        {
            XTTProperties.printFail(this.getClass().getName()+": setVariable: variableName");
            XTTProperties.printFail(this.getClass().getName()+": setVariable: variableName serverPort");
            return;
        }
        if(parameters.length<2||parameters.length>3)
        {
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName");
            XTTProperties.printFail(parameters[0]+":"+MISSING_ARGUMENTS+": variableName serverPort");
            XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_MISSING_ARGUMENTS);
        } else
        {
            int port=0;
            if(parameters.length != 3)
            {
                    port=XTTProperties.getIntProperty("RTSPSERVER/PORT");
            }
            else
            {
                try
                {
                    port=Integer.parseInt(parameters[2]);
                } catch (NumberFormatException nfe)
                {
                    XTTProperties.printFail(parameters[0] + ": '"+parameters[2]+"' is NOT a number");
                    XTTProperties.setTestStatus(XTTProperties.FAILED_WITH_INVALID_ARGUMENTS);
                }
            }
            int numworkers=RTSPServer.getLastWorkerId(port+"");
            XTTProperties.printInfo(parameters[0]+": stored '"+numworkers+"' to "+parameters[1]);
            XTTProperties.setVariable(parameters[1],""+numworkers);
        }
    }

    /**
     * Called for selftest purposes to see if this FunctionModules resources are avaiable.
     *
     */
    public String checkResources()
    {
        int securePort = XTTProperties.getIntProperty("RTSPSERVER/CLIENTPORT");
        int standardPort = XTTProperties.getIntProperty("RTSPSERVER/PORT");

        String resourceString = null;
        try
        {
            if(standardPort>0)
            {
                java.net.ServerSocket stndrdPrt = new java.net.ServerSocket(standardPort);
                stndrdPrt.close();
            }
        } catch(java.net.BindException be)
        {
            resourceString = "" + this.getClass().getName() + ": Unavailable port '" +  standardPort + "'";
        } catch(java.io.IOException ioe){}

        try
        {
            if(securePort>0)
            {
                java.net.ServerSocket scrPrt =  new java.net.ServerSocket(securePort);
                scrPrt.close();
            }
        } catch(java.net.BindException be)
        {
            if(resourceString==null)
            {
                resourceString = "" + this.getClass().getName() + ": Unavailable port  '" +  securePort + "'";
            } else
            {
                resourceString += ",'" +  securePort + "'";
            }
        } catch(java.io.IOException ioe){}

        if(resourceString == null)
        {
            resourceString = "" + this.getClass().getName() + ": OK";
        }

        return resourceString;
    }

    /**
     * returns the getClass().getName() of this object. For debug reasons only.
     */
    public String toString()
    {
        return this.getClass().getName();
    }

    public static final String tantau_sccsid = "@(#)$Id: FunctionModule_RTSP.java,v 1.7 2009/09/16 11:27:09 rsoder Exp $";


}

