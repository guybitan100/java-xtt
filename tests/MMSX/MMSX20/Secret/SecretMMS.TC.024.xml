<test>
    <name>SecretMMS.TC.024</name>
    <description>Validate Secret MMS Use Case / Via non-secure HTTP-IN Application receives MM1 Message with "application/vnd.wap.multipart.related" Content-Type (200 Kbytes) (mms.smil + text/plain + images + sounds + videos in multiple slides) / Application sends MM via MM7-OUT
Test Category: MUST
Test Steps:
---------------------------------------------------------------
	1. Login subscriber web/wap portal.
	2. Sender and Recipient are provision in application.
	3. Sender has "Secret MMS" feature enable and sends intercepted message through MMS Proxy via MM1 with Content-Type "application/vnd.wap.multipart.related".
	4. Application identifies this MMS as Secret and sends "Send Body" in response.
	5. Body has been sent through HTTP-POST request.
	6. Application sends the charging request to Billing application and gets the OK response.
	7. Application saves that MMS within the persistent storage.
	8. Application sends the discard message to MMS proxy
	9. Application sends secret request through SMS message to Recipient.
---------------------------------------------------------------
<!--  Modules Used:
	  1. HTTP
	  2. SMSC
	  3. Diameter
	  4. Remote
	  5. Basic
	TODO:
	1. Allocate the Users with all required services and with valid password
	2. Find how to receive SMS for recepient and how to reply to that SMS with passoword as a containt
	3. Findout how to send Mulipart Message-->	
</description>

	<!-- Delete Message Store -->
	<subtest>../deleteMessageStoreAll.xml</subtest> 

	<!-- Available MSISDN -->
	<configuration>../subscriber_config.xml</configuration>

	<!-- Start SMSC Server -->
	<function name="startSMSCServer" module="SMS"/>
	<function name="waitForBind" module="SMS"/>

	<!-- Start MMSC Server -->
	<function name="startMMSCServer" module="MMSC"/>

	<!-- Query the name of the active MESSAGE-STORE process -->
	<function name="activeProcessToVar" module="Remote">
		<parameter>MESSAGE-STORE</parameter>
		<parameter>Message_Store_Process_Name</parameter>
	</function>

	<!-- Set mandatory headers for request -->
	<function name="setHeader" module="HTTP">
		<parameter>X-Proxy-Region</parameter>
		<parameter>Siberia</parameter>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>X-Proxy-Session-Id</parameter>
		<parameter>987655</parameter>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>X-Proxy-MMS-Message-Type</parameter>
		<parameter>m-send-req</parameter>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>To</parameter>
		<configuration>MMSX/SECRET/RECIPIENT/MSISDN3</configuration>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>X-Proxy-Subscriber-MSISDN</parameter>
		<configuration>MMSX/SECRET/SENDER/MSISDN1</configuration>
	</function>

	<!-- Set subject with Secret message symbol # -->
	<function name="setHeader" module="HTTP">
		<parameter>Subject</parameter>
		<parameter>#This is multipart test case Secret TC.024</parameter>
	</function>

	<!-- Send Metadeta Request -->
	<function name="sendGetRequest" module="HTTP">
		<parameter>
			<parameter>http://</parameter>
			<configuration>MMS_Extra/IP</configuration>
			<parameter>:</parameter>
			<configuration>MMS_Extra/PORT</configuration>
			<parameter>/New-Message-Intercepted</parameter>
		</parameter>
	</function>

	<!-- Check response back from application -->
	<function name="checkResponseCode" module="HTTP">
		<parameter>200</parameter>
	</function>

	<!-- Will get response as New-Message-Intercepted-Response where need to validate X-Proxy-Handle as "send-body" and set X-Application-Context-Id as TransactionID -->
	<function name="checkHeader" module="HTTP">
		<parameter>X-Proxy-Handle</parameter>
		<parameter>send-body</parameter>
	</function>

	<function name="queryText" module="BASIC">
		<variable>HTTP/HEADER/X-Application-Context-Id</variable>
		<parameter>TransactionID</parameter>
		<parameter>(.*)</parameter>
	</function>

	<function name="info" module="Basic">
		<parameter>TransactionID=</parameter>
		<variable>TransactionID</variable>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>X-Application-Context-Id</parameter>
		<variable>TransactionID</variable>
	</function>

	<function name="setHeader" module="HTTP">
		<parameter>Content-Type</parameter>
		<parameter>application/vnd.wap.multipart.related</parameter>
	</function>

	<!-- Set FileName for the 1st Part of Create-MultiPart-Mixed-File -->
	<function name="setVariable" module="Basic">
		<parameter>file1</parameter>
		<parameter>sampletext1.bin</parameter>
	</function>

	<!-- Set FileType for the 1st Part of Create-MultiPart-Mixed-File -->
	<function name="setVariable" module="Basic">
		<parameter>type1</parameter>
		<parameter>plain/text</parameter>
	</function>

	<!-- Set FileName for the 2nd Part of Create-MultiPart-Mixed-File -->
	 <function name="setVariable" module="Basic">
		<parameter>file2</parameter>
		<parameter>image001.jpg</parameter>
	</function>

	<!-- Set FileType for the 2nd Part of Create-MultiPart-Mixed-File -->
	<function name="setVariable" module="Basic">
		<parameter>type2</parameter>
		<parameter>image/jpeg</parameter>
	</function>

	<!-- Set FileName for the 3rd Part of Create-MultiPart-Mixed-File -->
	 <function name="setVariable" module="Basic">
		<parameter>file3</parameter>
		<parameter>sound.mp3</parameter>
	</function>

	<!-- Set FileType for the 3rd Part of Create-MultiPart-Mixed-File -->
	<function name="setVariable" module="Basic">
		<parameter>type3</parameter>
		<parameter>audio/mpeg</parameter>
	</function>

	<!-- Set FileName for the 4th Part of Create-MultiPart-Mixed-File -->
	 <function name="setVariable" module="Basic">
		<parameter>file4</parameter>
		<parameter>sample.flv</parameter>
	</function>

	<!-- Set FileType for the 4th Part of Create-MultiPart-Mixed-File -->
	<function name="setVariable" module="Basic">
		<parameter>type4</parameter>
		<parameter>video/flv</parameter>
	</function>

	<!-- Set charset for the Create-base64-File -->
	<function name="setVariable" module="Basic">
		<parameter>char</parameter>
		<parameter>us-ascii</parameter>
	</function>

	<!-- Set Headers for Send Body request -->
	<function name="setVariableLines" module="Basic">
		<parameter>2</parameter>
		<parameter>headers</parameter>
		<parameter>To: </parameter>                     <configuration>MMSX/SECRET/RECIPIENT/MSISDN3</configuration>
		<parameter>X-Proxy-Subscriber-MSISDN: </parameter>                   <configuration>MMSX/SECRET/SENDER/MSISDN1</configuration>
		<parameter>X-Mms-Message-Type: </parameter>     <parameter>m-send-req</parameter>
		<parameter>X-MMS-Transaction-ID: </parameter>   <variable>TransactionID</variable>
		<parameter>Content-Type: </parameter>           <parameter>multipart/related; boundary="----=_Part_1_31161848.1109320473531"</parameter>
	</function>

	<!-- Call Subtest to Greate Multipart File -->
	<subtest>Create-MultiPart-File-Related2.xml</subtest>

	<function name="setPostData" module="HTTP">
		<file>send-multipart-related.bin</file>
		<parameter/>
	</function>

	<!-- Send Body to application-->
	<function name="sendPostRequest" module="HTTP">
		<parameter>
			<parameter>http://</parameter>
			<configuration>MMS_Extra/IP</configuration>
			<parameter>:</parameter>
			<configuration>MMS_Extra/PORT</configuration>
			<parameter>/Message-Body</parameter>
		</parameter>
	</function>

		<!-- Validate "discard" response from Application to MMS proxy server -->
	<function name="checkHeader" module="HTTP">
		<parameter>X-Proxy-Handle</parameter>
		<parameter>discard</parameter>
	</function>

	<!-- Send Charge credit request -->

	<!-- Check for response from Diameter server -->


	<!-- wait for 1 WSP sms message -->
	<function name="waitForWSPMessages" module="SMS">
		<parameter>1</parameter>
	</function> 
	

<function name="getServerConnection" module="SMPP">
         <parameter>MMSX</parameter>
		<parameter>0</parameter>
    </function> 

<function name="sendSMPPPacket" module="SMPP">
		<parameter>MMSX</parameter>
		<parameter>DELIVER_SM</parameter>
		<parameter>internal</parameter>
		<parameter>1</parameter>
		<parameter>0</parameter>
		<parameter>1</parameter>
		<configuration>MMSX/SECRET/RECIPIENT/MSISDN3</configuration>
		<parameter>0</parameter>
		<parameter>1</parameter>
		<configuration>MMSX/SHORTCODE/MSISDN1</configuration>
		<parameter>0</parameter>
		<parameter>0</parameter>
		<parameter>0</parameter>
		<parameter></parameter>
		<parameter></parameter>
		<parameter>0</parameter>
		<parameter>0</parameter>
		<parameter>0</parameter>
		<parameter>0</parameter>
		<parameter>123456</parameter>
	</function>

<!-- Waiting for the SMS response from MSMX -->
	<function name="waitForRequests" module="MMSC">
		<parameter>1</parameter>
	</function>

<!-- It's a good Idea to check whether the response is actually a correct MM7 request by validating against the standards -->
	<function name="validateXML" module="XML">
		<variable>MMSCSERVER/MM7/SOAP</variable>
		<parameter></parameter>
		<configuration>MMSCSERVER/XMLNSENV</configuration>
		<configuration>MMSCSERVER/SOAPXSD</configuration>
		<configuration>MMSCSERVER/XMLNSMM7</configuration>
		<configuration>MMSCSERVER/MM7XSD</configuration>
	</function>

	<!-- check MM7 version set correctly in response -->
	<function name="queryText" module="Basic">
		<variable>MMSCSERVER/MM7/SOAP</variable>
		<parameter>dev/null</parameter>
		<parameter>
			<parameter>&lt;MM7Version&gt;5.6.0&lt;/MM7Version&gt;</parameter>
		</parameter>
	</function>

	<!-- Check Secret Subject -->
	<function name="queryText" module="Basic">
		<variable>MMSCSERVER/MM7/SOAP</variable>
		<parameter>dev/null</parameter>
		<parameter>
			<parameter>&lt;Subject&gt;\{MMSX:F</parameter>
			<configuration>MMSX/SECRET/SENDER/MSISDN1</configuration>
			<parameter>\}This is multipart test case Secret TC.024&lt;/Subject&gt;</parameter>
		</parameter>
	</function>

	<function name="sleep" module="basic">
		<parameter>2000</parameter>
	</function>

	<!-- Check for MMS message stored in Message Store-->
	<function name="executeRemoteXMSCommand" module="Remote">
		<parameter>
			<parameter>run command amocli -k count TI:F.CEE.</parameter>
			<variable>Message_Store_Process_Name</variable>
			<parameter>:AMO</parameter>
		</parameter>
	</function>

	<function name="queryResponse" module="Remote">
		<parameter>amocli: 0 items counted</parameter>
		<parameter>response</parameter>
	</function>

	<function name="sleep" module="basic">
            <parameter>2000</parameter>
    </function>

	<!-- Stop SMSC/MMSC Server -->
	<function name="stopSMSCServer" module="SMS"/>
	<function name="stopMMSCServer" module="MMSC"/>
	</test>