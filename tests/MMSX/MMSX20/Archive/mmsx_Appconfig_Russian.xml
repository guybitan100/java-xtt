<?xml version="1.0" encoding="utf-8"?>
<appConfig>

<!-- $Id: mmsx_Appconfig_Russian.xml,v 1.1 2010/08/10 08:05:07 mbhopale Exp $ -->
 
<!-- This is the example appconfig file for MMSX. -->

<!-- 
This is used to warn a subscriber that their free disk space on the database is getting low.
You use the archiveMaxDiskSpaceKb parameter to configure the maximum disk space that each subscriber can use for their archive folders and their autoreply messages.

When the free space falls below the value you configure with archiveFreeSpaceThresholdKb, the subscriber portal displays some text on the screen to tell the subscriber that they are running out of disk space and that they should delete messages to free up some space.-->
<parameter name="archiveFreeSpaceThresholdKb">
    <value>200</value>
</parameter>

<!-- 
This is the maximum amount of disk space that each subscriber can use for their archived messages and their autoreply messages. -->
<parameter name="archiveMaxDiskSpaceKb">
    <value>15000</value>
</parameter>

<!--
The text of the message status that is shown in the outbox if the message was successfully delivered to all of the target recipients. -->
<parameter name="archiveStatusDelivered">
    <value>Delivered</value>
</parameter>

<!--
The text of the message status that is shown in the inbox if the message was forwarded to the subscriberâ€™s forwarding address. 

MMSX sets the status to forwarded when it successfully sends the message to the local MMSC. It means that the MMSC has accepted responsibility for delivering the message but MMSX does not know whether the forwarded message was delivered. -->
<parameter name="archiveStatusForwarded">
    <value>Forwarded</value>
</parameter>

<!--
The text of the message status that is shown in the outbox if the message was not delivered to any of the target recipients..  -->
<parameter name="archiveStatusNotDelivered">
    <value>Not delivered</value>
</parameter>

<!--
The text of the message status that is shown in the outbox if MMSX has stored the message in its message store, but has not yet managed to send the message to its local MMSC. -->
<parameter name="archiveStatusSending">
    <value>Sending</value>
</parameter>

<!--
The text of the message status that is shown in the outbox if MMSX successfully sent the message to the local MMSC and the MMSC accepted responsibility for delivering the message, but MMSX does not yet know whether the message got to the target recipients. -->
<parameter name="archiveStatusSent">
    <value>Ыуте</value>
</parameter>

<!-- 
This is a list of nicknames that are banned. MMSX does not allow subscribers to select any of these nicknames. -->
<parameter name="bannedNicknames">
    <value>bannedNickName1</value>
    <value>bannedNickName2</value>
    <value>bannedNickName3</value>
</parameter>

<!--
The string that a subscriber uses in the prefix of the subject of an MMS message that says that this is a calendar message that is to be delivered at a specified time and date.

It is followed by a string that species the date and time in the following format, where "HH" is the hours in 24 hour format:  

    <HH:mm DD.MM.YY> 
-->
<parameter name="calendarDateSubjectPrefix">
    <value>T</value>
</parameter>

<!--
The string that a subscriber uses in the prefix of the subject of an MMS message that says that this is a calendar message that is to be delivered after a specified number of minutes.

It is followed by a string that species the number of minutes in the following format, where "n" is a value between 1 and 9999:

    <n>
-->
<parameter name="calendarDurationSubjectPrefix">
    <value>D</value>
</parameter>

<!--
This defines how far into the future a subscriber can ask for a message to be sent.  -->
<parameter name="calendarMaxFutureDays">
    <value>7</value>
</parameter>

<!--
Parameters whose names begin with "errorMm1Text" define various error messages that
the MMSX application may return to the Advanced MM1 proxy -->

<parameter name="errorMm1TextExpressMultipleRecipients">
    <value>MMSX: Express message rejected because you can only send a express message to a single target recipient.</value>
</parameter>
<parameter name="errorMm1TextInsufficientFunds">
    <value>MMSX: Message rejected because the balance in your account is too low.</value>
</parameter>
<parameter name="errorMm1TextInvalidCalendarTime">
    <value>MMSX: Calendar message rejected because the calendar time was invalid (the time format was invalid, or the time was in the past or too far ahead in the future).</value>
</parameter>
<parameter name="errorMm1TextRecipientOnBlacklist">
    <value>MMSX: Secret message rejected because the recipient is on our global backlist.</value>
</parameter>
<parameter name="errorMm1TextSecretMultipleRecipients">
    <value>MMSX: Secret message rejected because you can only send a secret message to a single target recipient.</value>
</parameter>
<parameter name="errorMm1TextSecretNoPassword">
    <value>MMSX: Secret message rejected because you have not configured a password for the target recipient.</value>
</parameter>
<parameter name="errorMm1TextSecretUnknownRecipient">
    <value>MMSX: Secret message rejected because the target recipient has not registered for MMS Extra services.</value>
</parameter>
<parameter name="errorMm1TextServiceDisabled">
    <value>MMSX: Message rejected because its subject started with a keyword associated with a service that you have turned off.</value>
</parameter>
<parameter name="errorMm1TextUnknownGroup">
    <value>MMSX: Message to a group rejected because you have not configured the specified group.</value>
</parameter>
<parameter name="errorMm1TextUnknownSender">
    <value>MMSX: Message rejected because its subject started with an MMS Extra keyword but you have not registered for MMS Extra services.</value>
</parameter>


<!--
This says how long an express message can stay in the message store. After this time, it is deleted from the message store.  -->
<parameter name="expressExpiryHours">
    <value>168</value>
</parameter>

<!--
The start of the text of the WAP push message that MMSX sends to the recipient of an express message. It is followed by the URL that the subscriber clicks to display the MMS message.  -->
<parameter name="expressNotificationText">
    <value>MMS Extra: New message from $from, click URL to display the message: </value>
</parameter>

<!--
The prefix of the URL that identifies an express message. This has the format:

   http[s]://<domain>[:<port>]/<path>

   where:

   *  <domain> and <port> are the domain name (or IP address) and port of the load balancer in front of MMSX that receives incoming requests to access the subscriber portal.

   *  <path> is any string you want.

It does not include the search string part of the URL, which uniquely identifies the message within the store. -->
<parameter name="expressRetrievalUrl">
    <value>http://telco.example:8888/ExpressRetrieval</value>
</parameter>

<!--
The string that a subscriber uses in the prefix of the subject of an MMS message that says that this is an express message.  -->
<parameter name="expressSubjectPrefix">
    <value>!</value>
</parameter>

<!--
The text of the SMS message that is sent back to the subscriber when they use an SMS or USSD message to turn on the forwarding service and to change their forwarding address to something that doesnâ€™t look like an MSISDN. -->
<parameter name="forwardingInvalidAddress">
    <value>MMSX Extra: Request failed - invalid forwarding phone number.</value>
</parameter>


<!--
The text that the subscriber puts at the start of an SMS message that they send to the general service shortcode (configured by the â€œserviceSmsShortcodeâ€ parameter) in order to identify the service as the forwarding service. It is followed by zero or more space characters followed by the service action text configured by the â€œforwardingSmsOffTextâ€ or â€œforwardingSmsOnTextâ€ parameter.  -->
<parameter name="forwardingSmsMessagePrefix">
    <value>fwd</value>
</parameter>

<!--
The text that subscribers put after the text configured by â€œforwardingSmsMessagePrefixâ€ when they send SMS messages to turn off the forwarding service. 
MMSX ignores any text in the message that comes after the text configured by this parameter. -->
<parameter name="forwardingSmsOffText">
    <value>off</value>
</parameter>

<!--
The text that subscribers put after the text configured by â€œforwardingSmsMessagePrefixâ€ when they send SMS messages to turn on the forwarding service.
The text can optionally be following by one or more space characters, then the subscriberâ€™s new forwarding address. -->
<parameter name="forwardingSmsOnText">
    <value>on</value>
</parameter>

<!--
The text of the SMS message that is sent back to the subscriber when they successfully turn off the forwarding service by sending an SMS or USSD message. -->
<parameter name="forwardingStatusOffText">
    <value>MMS Extra: Forwarding service is now turned off.</value>
</parameter>

<!--
The prefix of the text of the SMS message that is sent back to the subscriber when they successfully turn on the forwarding service by sending an SMS or USSD message. This text is followed by the subscriberâ€™s current forwarding address.  -->
<parameter name="forwardingStatusOnText">
    <value>MMS Extra: Forwarding service is now turned on. Your forwarding address is: </value>
</parameter>

<!--
The text that is added to the start of the subject line of an MMS message that is forwarded. -->
<parameter name="forwardingSubjectPrefix">
    <value>Fwd: </value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to a subscriber when they fail to change the status of the forwarding service by sending an SMS or USSD message, because either:

*  MMSX recognized the forwarding prefix at the start of the message, but did not recognize 
   the requested service status - it did not recognize the string after that prefix.
   
*  The subscriber was trying to turn on the forwarding service without supplying a new 
    forwarding address, but they have not configured a forwarding address.
-->
<parameter name="forwardingUnknownStatusText">
    <value>MMS Extra: Invalid request to change status of forwarding service.</value>
</parameter>

<!--
The string at the start of a USSD message that identifies the service as the forwarding service. -->
<parameter name="forwardingUssdMessagePrefix">
    <value>1</value>
</parameter>

<!-- 
This is the global blacklist. It is a list of shortcodes and normalized MSISDNs that:

*  Cannot be used as the target recipient for a secret message.
*  Are not to be archived in any subscriberâ€™s outbox when the subscriber sends a message to an MSISDN or shortcode on this list.
 -->
<parameter name="globalBlacklist">
    <value>447739751723</value>
    <value>447898654014</value>
</parameter>

<!--
The group shortcode. This is the shortcode that a subscriber puts as a recipient address in an MMS message that is to be sent to a group. MMSX replaces this shortcode with the list of the MSISDNs of all the subscribers in the group whose name is specified as the prefix of the subject of the incoming message. -->
<parameter name="groupShortcode">
    <value>44444</value>
</parameter>

<!--
The maximum size of object that can be used to create an autoreply message. The subscriber portal does not let a subscriber insert an image, audio or video file that is bigger than this value.  -->
<parameter name="maxAutoreplyObjectSizeKb">
    <value>490</value>
</parameter>

<!-- 
The maximum number of entries that can be in a subscriberâ€™s black or white list. -->
<parameter name="maxEntriesPerSubscriberFilterList">
    <value>100</value>
</parameter>

<!-- 
The maximum number of MMS groups that a subscriber can configure. -->
<parameter name="maxGroupsPerSubscriber">
    <value>5</value>
</parameter>

<!-- 
The maximum number of characters that can be in a group name. -->
<parameter name="maxLengthGroupName">
    <value>10</value>
</parameter>

<!-- 
The maximum number of phone numbers that can be in a single MMS group. -->
<parameter name="maxMembersPerGroup">
    <value>30</value>
</parameter>

<!-- 
The shortcode that is used as the â€œfromâ€ address when MMSX delivers an MMS message via MM7. -->
<parameter name="mm7FromAddressShortcode">
    <value>33333</value>
</parameter>

<!--
The change nickname shortcode.
This is the shortcode to which a subscriber sends an SMS message in order to change their nickname after they have configured their nickname for the first time. -->
<parameter name="nicknameChangeNickShortcode">
    <value>66666</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they use an SMS message to either set their nickname for the first time or change their nickname, and they try to select an invalid nickname, which is:

*   A string that is longer than 8 characters or that contains characters other 
    than alphanumeric characters.
*   A string that is on the list of banned nicknames configured by the â€œbannedNicknamesâ€ 
    parameter in the â€œappconfigâ€ file.
 -->
<parameter name="nicknameInvalidNickname">
    <value>MMS Extra: Request failed - invalid nickname.</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when the following conditions are both true:

*  The subscriber tried to change their nickname by sending an SMS message to the 
   change nickname shortcode (configured by the â€œnicknameChangeNickShortcodeâ€ parameter).
*  The text of that SMS message did not start with the string configured by the
    â€œnicknameSmsMessagePrefixâ€ parameter.
 -->
<parameter name="nicknameInvalidPrefixText">
    <value>MMS Extra: Invalid request to change nickname. The message text must be "nick [new-nickname]".</value>
</parameter>

<!--
The prefix of the text of the SMS message that MMSX sends back to the subscriber when they successfully change their nickname by sending an SMS message to the change nickname shortcode (configured by the â€œnicknameChangeNickShortcodeâ€ parameter). It is followed by the new nickname. -->
<parameter name="nicknameNickChangedText">
    <value>MMS Extra: Nickname changed to </value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when the following conditions are both true:

*  The subscriber had not previously set their nickname.
*  The subscriber tried to change their nickname by sending an SMS message to the change     
    nickname shortcode (configured by the â€œnicknameChangeNickShortcodeâ€ parameter).
-->
<parameter name="nicknameNickChangeNotSetText">
    <value>MMS Extra: This is a payable service to change your nickname. You must first use a free service to set your nickname for the first time. To do this, reply to this SMS message with a message whose text is either "nick on &lt;nickname&gt;" or "nick cond &lt;nickname&gt;", depending on whether you want to turn on the conditional or unconditional nickname service.</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when the following conditions are both true:

*  The subscriber had not previously set their nickname.
*  The subscriber either sent a USSD message to change the status of the nickname 
    service, or they sent an SMS message to the general service shortcode (configured 
    by â€œserviceSmsShortcodeâ€) to turn off the nickname service.
-->
<parameter name="nicknameNickNotSetText">
    <value>MMS Extra: Nickname not set. Please set your nickname by replying to this SMS message with a message whose text is either "nick on &lt;nickname&gt;" or "nick cond &lt;nickname&gt;, depending on whether you want to turn on the conditional or unconditional nickname service.</value>
</parameter>

<!--
The text that a subscriber puts after the text configured by â€œnicknameSmsMessagePrefixâ€ when they send an SMS message to the general service shortcode (configured by â€œserviceSmsShortcodeâ€) to turn on the conditional nickname service.
The text is case insensitive. For example, if the value is â€œcondâ€, a subscriber can use â€œCONDâ€, â€œcondâ€, â€œCondâ€ and so on.  -->
<parameter name="nicknameSmsCondText">
    <value>cond</value>
</parameter>

<!--
This is the text that the subscriber puts both:

*  At the start of an SMS message that they send to the general service shortcode 
   (configured by â€œserviceSmsShortcodeâ€) in order to identify the service as the nickname 
    service. This text is followed by zero or more space characters, followed by the 
    service action text configured by the â€œnicknameSmsCondTextâ€, â€œnicknameSmsOnTextâ€ 
    or â€œnicknameSmsOffTextâ€ parameter.

*  At the start of an SMS message that they send to the change nickname shortcode 
   (configured by the â€œnicknameChangeNickShortcodeâ€ parameter) in order to change their 
   nickname. This text is followed by one or more space characters, then the new nickname.
-->
<parameter name="nicknameSmsMessagePrefix">
    <value>nick</value>
</parameter>

<!--
The text that a subscriber puts after the text configured by â€œnicknameSmsMessagePrefixâ€ when they send an SMS message to the general service shortcode (configured by â€œserviceSmsShortcodeâ€) to turn off the nickname service.
MMSX ignores any text in the message that comes after the text configured by this parameter. -->
<parameter name="nicknameSmsOffText">
    <value>off</value>
</parameter>

<!--
The text that a subscriber puts after the text configured by â€œnicknameSmsMessagePrefixâ€ when they send an SMS message to the general service shortcode (configured by â€œserviceSmsShortcodeâ€) to turn on the unconditional nickname service.
The text is case insensitive. For example, if the value is â€œonâ€, a subscriber can use â€œONâ€, â€œonâ€, â€œOnâ€ and so on.  -->
<parameter name="nicknameSmsOnText">
    <value>on</value>
</parameter>

<!--
The prefix of the text of the SMS message that MMSX sends back to the subscriber when they successfully turn on the conditional nickname service by sending an SMS or USSD message. It is followed by the subscriberâ€™s nickname. -->
<parameter name="nicknameStatusCondText">
    <value>ííãããùùùÿÿííóó</value>
</parameter>

<!--
The text of the SMS message that is sent back to the subscriber when they successfully turn off the nickname service by sending an SMS or USSD message. -->
<parameter name="nicknameStatusOffText">
    <value>ããÿÿêóûååùùã</value>
</parameter>

<!--
	The prefix of the text of the SMS message that MMSX sends back to the subscriber when they successfully turn on the unconditional nickname service by sending an SMS or USSD message. It is followed by the subscriberâ€™s nickname. -->
	<parameter name="nicknameStatusOnText">
   <!-- <value>MMS Extra: Unconditional nickname service is now turned on. Your nickname is: </value>--> 
     <value>ôôïððóååãû</value>
</parameter>

<!--
When a subscriber has turned on the conditional nickname service, the subscriber puts this string in the prefix of the subject of an MMS message if they want to use the nickname service for that MMS message.  -->
<parameter name="nicknameSubjectPrefix">
    <value>?</value>
</parameter>


<!--
The text of the SMS message that MMSX sends to a subscriber when they fail to change the status of the nickname service by sending an SMS or USSD message (MMSX recognized the nickname prefix at the start of the message, but did not recognize the requested service status - it did not recognize the string after that prefix). -->
<parameter name="nicknameUnknownStatusText">
    <value>MMS Extra: Invalid request to change status of nickname service.</value>
</parameter>

<!--
The string at the start of a USSD message that identifies the service as the nickname service.
This text is followed by zero or more space characters, followed by the service action text configured by the â€œussdCondTextâ€, â€œussdOnTextâ€ or â€œussdOffTextâ€ parameter. -->
<parameter name="nicknameUssdMessagePrefix">
    <value>2</value>
</parameter>

<!--
The text that the subscriber puts at the start of an SMS message that they send to the general service shortcode (configured by â€œserviceSmsShortcodeâ€) in order to identify the service as the autoreply service. This text is followed by zero or more space characters, followed by the service action text configured by the â€œoooSmsOnTextâ€ or â€œoooSmsOffTextâ€ parameter.  -->
<parameter name="oooSmsMessagePrefix">
    <value>ooo</value>
</parameter>

<!-- 
The text that subscribers put after the text configured by â€œoooSmsMessagePrefixâ€ when they send SMS messages to turn off the autoreply service.
MMSX ignores any text in the message that comes after the text configured by this parameter.
The text is case insensitive. For example, if the value is â€œoffâ€, a subscriber can use â€œOFFâ€, â€œoffâ€, â€œOfFâ€ and so on.  -->
<parameter name="oooSmsOffText">
    <value>off</value>
</parameter>

<!--
The text that subscribers put after the text configured by â€œoooSmsMessagePrefixâ€ when they send SMS messages to turn on the autoreply service.
MMSX ignores any text in the message that comes after the text configured by this parameter.
The text is case insensitive. For example, if the value is â€œonâ€, a subscriber can use â€œONâ€, â€œonâ€, â€œOnâ€ and so on.  -->
<parameter name="oooSmsOnText">
    <value>on</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they successfully turn off the autoreply service by sending an SMS or USSD message.  -->
<parameter name="oooStatusOffText">
  <!--  <value>MMS Extra: Autoreply service is now turned off.</value>-->
        <value>Ã´ Ã¥Ãª</value>
</parameter>

<!-- 
The text of the SMS message that MMSX sends back to the subscriber when they successfully turn on the autoreply service by sending an SMS or USSD message. -->
<parameter name="oooStatusOnText">
  <!--  <value>MMS Extra: Autoreply service is now turned on.</value>-->
       <value>Ã¯Ã¥</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they fail to change the status of the autoreply service by sending an SMS or USSD message because either:

*  MMSX recognized the autoreply prefix at the start of the message, but did not recognize 
   the requested service status - it did not recognize the string after that prefix.

 *  The subscriber was trying to turn on the autoreply service but they had not configured a 
     default autoreply message or any autoreply messages associated with any subscribers or 
     groups (the latter are called active autoreply messages).
-->
<parameter name="oooUnknownStatusText">
    <value>MMS Extra: Invalid request to change status of autoreply service.</value>
</parameter>

<!--
The string at the start of a USSD message that identifies the service as the autoreply service. This text is followed by zero or more space characters, followed by the service action text configured by the â€œussdOnTextâ€ or â€œussdOffTextâ€ parameter. -->
<parameter name="oooUssdMessagePrefix">
    <value>3</value>
</parameter>

<!--
The URL of the LDAP server that is used to authenticate requests from operators to log in to the subscriber portal. -->
<parameter name="portalLdapUrl">
    <value>192.168.34.2</value>
</parameter>

<!--
Specifies what type of authentication is used by the subscriber portal.  The value can be "local" or "sso". -->
<parameter name="portalLoginType">
    <value>local</value>
</parameter>

<!--
The maximum number of times that a subscriber can enter the wrong MISISDN and password combination, when they try to log in to the portal. After this, the subscriber can no longer use their current password to log in, and has to use the portalâ€™s reset password option. -->
<parameter name="portalMaxLoginAttempts">
    <value>5</value>
</parameter>

<!--
A list of the usernames and password that are used to authenticate requests from operators 
to log in to the MMSX subscriber portal. 

For each operator, the value consists of three elements, separated by space characters:

*  The username that the operator types in on the portal login screen. 
*  The password that the operator types in on the portal login screen.
*  The operatorâ€™s password that is stored in the local LDAP database.
-->
<parameter name="portalOperatorUsernamePasswords">
    <value>Jack password1 password2</value>
    <value>Gill password3 password4</value>
</parameter>

<!--
See the description of â€œportalResetMaxAttemptsâ€ below. -->
<parameter name="portalResetBlockMinutes">
    <value>120</value>
</parameter>

<!--
The maximum number of times that a subscriber can use the reset password option within the period configured by the â€œportalResetPeriodMinutesâ€ parameter.
After this, the subscriber cannot use the reset password option for the length of time configured by the â€œportalResetBlockMinutesâ€ parameter. -->
<parameter name="portalResetMaxAttempts">
    <value>5</value>
</parameter>

<!--
See the description of â€œportalResetMaxAttemptsâ€ above. -->
<parameter name="portalResetPeriodMinutes">
    <value>60</value>
</parameter>

<!-- 
This specifies how long a subscriberâ€™s portal session can be idle before they are automatically logged off.-->
<parameter name="portalSessionTimeoutMins">
    <value>180</value>
</parameter>

<!--
The prefix of the text that the subscriber puts at the start of an SMS message to change the password that they use to log in to the subscriber portal. It is followed by zero or more space characters, followed by their new password.
The subscriber sends the SMS message to the general service shortcode (configured by â€œserviceSmsShortcodeâ€).
The text is case insensitive. For example, if the value is â€œpassâ€, a subscriber can use â€œPASSâ€, â€œpassâ€, â€œpASSâ€ and so on. -->
<parameter name="portalSmsChangePasswordMessagePrefix">
    <value>pass</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they successfully change their password by sending an SMS message. -->
<parameter name="portalSmsChangePasswordOkText">
    <value>MMS Extra: Password successfully changed.</value>
</parameter>

<!--
The prefix of the text of the SMS message that MMSX sends to a subscriber that contains the randomly generated password that they use to log in to the subscriber portal. It is followed by the randomly generated password.-->
<parameter name="portalSmsGeneratedPasswordText">
    <value>MMS Extra: Your password to log into the subscriber portal is: </value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they send an SMS message to change their password but the selected password is invalid. -->
<parameter name="portalSmsInvalidPassword">
    <value>MMS Extra: Invalid password. The password must be between 6 and 10 characters long and contain only letters and numbers.</value>
</parameter>

<!--
The maximum length of time that MMSX will store a secret MMS message in the message store. After this time elapses the message is deleted from the store. 
-->
<parameter name="secretExpiryHours">
    <value>240</value>
</parameter>

<!--
The text of the SMS message that MMSX sends to the sender if a secret message expires before a recipient has collected it.  -->
<parameter name="secretNotCollectedText">
    <value>MMS Extra: Secret message sent to $to was not collected (sent: $date, subject: "$subject").</value>
</parameter>

<!--
The text of the SMS message that MMSX sends to a subscriber to notify them that they have a new secret message. The shortcode â€œ5511â€ in the example text must be the general service shortcode (configured by â€œserviceSmsShortcodeâ€). -->
<parameter name="secretNotificationText">
    <value>MMS Extra: You have a new secret MMS from $from. To receive it, send your password in an SMS message to 5511. Your password must be the first word of that SMS message.</value>
</parameter>

<!--
The string that a subscriber puts in the prefix of the subject of an MMS message that says that this is a secret MMS message.  -->
<parameter name="secretSubjectPrefix">
    <value>#</value>
</parameter>

<!--
The text of the SMS message that MMSX sends back to the subscriber when they send an SMS message to the general service shortcode (configured by â€œserviceSmsShortcodeâ€), or they send a USSD message and either:

*  For an incoming SMS message, the start of the message did not match any of the service 
    prefixes (configured by â€œforwardingSmsMessagePrefixâ€, â€œnicknameSmsMessagePrefixâ€, 
    â€œoooSmsMessagePrefixâ€ and â€œportalSmsChangePasswordMessagePrefixâ€) and the message 
    store did not contain any secret messages for that subscriber whose password matched
    the first word of the message.
    
*  For an incoming USSD message, the message did not start with any of the service prefixes 
   (configured by â€œforwardingUssdMessagePrefixâ€, â€œnicknameUssdMessagePrefixâ€, and 
   â€œoooUssdMessagePrefixâ€).
-->
<parameter name="serviceInvalidSmsUssdInputText">
    <value>MMS Extra: Invalid input, please send the request again.</value>
</parameter>

<!--
The general service shortcode.
This is the shortcode to which a subscriber sends SMS messages in order to configure MMS Extra services, an SMS message that contain their password for a secret message, and an SMS message that contains their new password to log in to the subscriber portal. -->
<parameter name="serviceSmsShortcode">
    <value>11111</value>
</parameter>

<!--
The string after the text configured by â€œnicknameUssdMessagePrefixâ€ in USSD messages to turn on the conditional nickname service. Any characters after this string are ignored. -->
<parameter name="serviceUssdCond">
    <value>2</value>
</parameter>

<!--
The string after the text configured by â€œnicknameUssdMessagePrefixâ€, â€œforwardingUssdMessagePrefixâ€ or â€œoooUssdMessagePrefixâ€ in USSD messages to turn off a service. Any characters after this string are ignored.  -->
<parameter name="serviceUssdOff">
    <value>0</value>
</parameter>

<!--
TThe string after the text configured by â€œnicknameUssdMessagePrefixâ€, â€œforwardingUssdMessagePrefixâ€ or â€œoooUssdMessagePrefixâ€ in USSD messages to turn on the conditional nickname service, the forwarding service or the autoreply service. 
For the forwarding service, this string can be followed by any number of space characters and then the forwarding address. Any characters after the forwarding address are ignored.
For the nickname and autoreply services, any characters after this string are ignored.  -->
<parameter name="serviceUssdOn">
    <value>1</value>
</parameter>

<!--
The SSO logout URL. This is the URL that is used when a subscriber clicks the logout button in the portal. -->
<parameter name="ssoLogoutUrl">
    <value>http://10.0.1.113:9080/amserver/UI/Logout</value>
</parameter>

<!--
This is used as the "from" address for any outgoing messages that MMSX sends to subscribers to provide some information but where MMSX does not want to process their replies. -->
<parameter name="systemShortcode">
    <value>55555</value>
</parameter>

<!-- 
The value of the key for reading the MSISDN that the SSO server returns in its response to the subscriber portal at the start of a session. -->
<parameter name="userMsisdnKey">
    <value>usermsisdn</value>
</parameter>

<!-- 
The value of the key for reading the user name that the SSO server returns for the customer care user in its response to the subscriber portal at the start of a session. -->
<parameter name="userNameKey">
    <value>username</value>
</parameter>

<!-- 
The value of the key for reading the user role that the SSO server returns in its response to the subscriber portal at the start of a session. There are two roles, one for a subscriber and one for an operator. -->
<parameter name="userRoleKey">
    <value>userrole</value>
</parameter>
</appConfig>
